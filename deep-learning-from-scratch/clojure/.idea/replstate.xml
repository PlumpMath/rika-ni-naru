<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1485077175610">{:repl-history {:ide [], :local [&quot;(:require [cortex-datasets.mnist :as mnist])&quot; &quot;(require 'cortex-datasets.mnist :as mnist)&quot; &quot;(def d (cortex-datasets.mnist/training-data))&quot; &quot;(d)&quot; &quot;d&quot; &quot;(flatten d)&quot; &quot;(clojure.core.matrix/shape d)&quot; &quot;(clojure.core.matrix/shape (flatten d))&quot; &quot;(clojure.core.matrix/shape (flatten (array d)))&quot; &quot;(clojure.core.matrix/shape (flatten (clojure.core.matrix/array d)))&quot; &quot;(matrix/to-vector d)&quot; &quot;(clojure.core.matrix/as-vector d)&quot; &quot;(clojure.core.matrix/as-vector (cortex-datasets.mnist/training-data))&quot; &quot;(require 'clojure.core.matrix 'cortex-datasets.mnist)()&quot; &quot;(require 'clojure.core.matrix 'cortex-datasets.mnist)&quot; &quot;(cortex-datasets.mnist/training-data)&quot; &quot;(map #(map (partial + 0.5) %)  (cortex-datasets.mnist/training-data))&quot; &quot;(map identity  (cortex-datasets.mnist/training-data))&quot; &quot;(mapcat identity (cortex-datasets.mnist/training-data))&quot; &quot;(require 'cortex-datasets.mnist)\n(require 'clojure.core.matrix)\n(def d (cortex-datasets.mnist/training-data))&quot; &quot;(deref d)&quot; &quot;1&quot; &quot;\n1&quot; &quot;(apply cat [[1 2] [3 4]])&quot; &quot;(apply concat [[1 2] [3 4]])\n&quot; &quot;(apply concat (deref d))&quot; &quot;(require 'clojure.core.matrix)&quot; &quot;(require 'cortex-datasets.mnist)&quot; &quot;(def d (ref (cortex-datasets.mnist/training-data)))&quot; &quot;(clojure.core.matrix/emap identity (deref d))&quot; &quot;(macroexpand '(-&gt; deref ref-x alength))&quot; &quot;(macroexpand '(-&gt; ref-x deref alength))&quot; &quot;(max-key identity [1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1])&quot; &quot;(apply max-key identity [1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1])&quot; &quot;(first (apply max-key second (map-indexed vector [1 2 4 0 5])))&quot; &quot;(macroexpand '(-&gt; \&quot;sample-weight.edn\&quot; io/resource io/file slurp read-string (map matrix/array)))&quot; &quot;(macroexpand '(-&gt;&gt; \&quot;sample-weight.edn\&quot; io/resource io/file slurp read-string (map matrix/array)))&quot; &quot;(macroexpand '(-&gt;&gt; coll (map-indexed vector) (apply max-key second) first))&quot; &quot;(def map {:a [[1 2 3] [4 5 6]] :b [[1 2 3] [4 5 6]] :c [[1 2 3] [4 5 6]]})&quot; &quot;(def m {:a [[1 2 3] [4 5 6]] :b [[1 2 3] [4 5 6]] :c [[1 2 3] [4 5 6]]})&quot; &quot;(map #((println %) %) m)&quot; &quot;(map #(println %) m)&quot; &quot;(map #(last %) m)&quot; &quot;(map str m)&quot; &quot;(map first m)&quot;], :remote []}}</component>
</project>